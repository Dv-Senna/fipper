cmake_minimum_required(VERSION 3.20)


set(LIBRARY_NAME ${PROJECT_NAME})
set(LIBRARY_VERSION ${PROJECT_VERSION})
set(LIBRARY_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(LIBRARY_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(LIBRARY_VERSION_PATCH ${PROJECT_VERSION_PATCH})

add_compile_definitions(
	${PROJECT_ACRONYM_UPPERCASE}_NAME=${LIBRARY_NAME}
	${PROJECT_ACRONYM_UPPERCASE}_VERSION_MAJOR=${LIBRARY_VERSION_MAJOR}
	${PROJECT_ACRONYM_UPPERCASE}_VERSION_MINOR=${LIBRARY_VERSION_MINOR}
	${PROJECT_ACRONYM_UPPERCASE}_VERSION_PATCH=${LIBRARY_VERSION_PATCH}
)

option(BUILD_STATIC "BUILD_STATIC" OFF)

if (BUILD_STATIC)
	set(LIBRARY_TYPE STATIC)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_STATIC)
else()
	set(LIBRARY_TYPE SHARED)
	add_compile_definitions(
		${PROJECT_ACRONYM_UPPERCASE}_SHARED
		${PROJECT_ACRONYM_UPPERCASE}_BUILD_LIB
	)
endif()

include_directories(include)

file(GLOB_RECURSE LIBRARY_HEADER *.hpp)
file(GLOB_RECURSE LIBRARY_INLINE *.inl)
file(GLOB_RECURSE LIBRARY_SOURCE *.cpp)

set(LIBRARY_VAR_TO_SEQ_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/include/fp/utils/generated/macroVarToSeq.hpp)
set(LIBRARY_TRAITS_AGGREGATE_REFLECTION_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/include/fp/utils/generated/traitsAggregateReflection.hpp)

list(APPEND ${LIBRARY_HEADER} ${LIBRARY_VAR_TO_SEQ_HEADER} ${LIBRARY_TRAITS_AGGREGATE_REFLECTION_HEADER})


set(LIBRARY_VAR_TO_SEQ ${LIBRARY_NAME}_var_to_seq)
add_custom_target(${LIBRARY_VAR_TO_SEQ}
	COMMAND python3 ${PROJECT_GENERATOR_SCRIPTS}/macro_var_to_seq.py ${LIBRARY_VAR_TO_SEQ_HEADER} ${FIPPER_VAR_TO_SEQ_MAX_SIZE}
)

set(LIBRARY_TRAITS_AGGREGATE_REFLECTION ${LIBRARY_NAME}_traits_aggregate_reflection)
add_custom_target(${LIBRARY_TRAITS_AGGREGATE_REFLECTION}
	COMMAND python3 ${PROJECT_GENERATOR_SCRIPTS}/traits_aggregate_reflection.py ${LIBRARY_TRAITS_AGGREGATE_REFLECTION_HEADER} ${FIPPER_REFLECTION_STRUCTURE_MAX_MEMBERS_COUNT}
)

add_library(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_HEADER} ${LIBRARY_INLINE} ${LIBRARY_SOURCE})
add_dependencies(${LIBRARY_NAME} ${LIBRARY_VAR_TO_SEQ} ${LIBRARY_TRAITS_AGGREGATE_REFLECTION})
set_property(TARGET ${LIBRARY_NAME} PROPERTY CXX_STANDARD ${PROJECT_CPP_DIALECT})

target_link_libraries(${LIBRARY_NAME} PUBLIC ${PROJECT_DEPS_LIBS})

if (MSVC)
	target_compile_options(${LIBRARY_NAME} PRIVATE /W4)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	target_compile_options(${LIBRARY_NAME} PRIVATE -Wall -Wextra -pedantic)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	target_compile_options(${LIBRARY_NAME} PRIVATE -Wall -Wextra -pedantic -stdlib=libc++)
endif()


if (WIN32)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_WINDOWS)
elseif (UNIX)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_LINUX)
elseif (APPLE)
	add_compile_definitions(${PROJECT_ACRONYM_UPPERCASE}_APPLE)
else()
	message(FATAL_ERROR "Platforms other than Windows, Linux and MacOS aren't supported for now")
endif()
